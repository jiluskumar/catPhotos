{"version":3,"sources":["components/NavMenu.js","components/Layout.js","components/imageRound.js","components/Home.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","to","NavbarToggler","onClick","Collapse","isOpen","navbar","Component","displayName","name","Layout","children","ImageRound","images","map","item","index","image","imageUrl","roundedSize","imageWidth","imageHeight","style","fontStyle","catName","paddingLeft","catAge","Home","nameChange","e","searchName","target","value","ageChange","searchAge","onFilter","payLoad","moreControls","Number","setTimeout","populateWeatherDataHome","resetControls","console","log","forecasts","loading","noRecords","countBind","contents","renderForecastsTableHome","event","test","key","preventDefault","id","onChange","team","a","fetch","parseInt","response","json","data","length","App","exact","path","component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25266f00.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n  static displayName = NavMenu.name;\r\n\r\n  constructor (props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar () {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header>\r\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n          <Container>\r\n            <NavbarBrand to=\"/\">Cat Photos</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n              <ul className=\"navbar-nav flex-grow\">\r\n              </ul>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n  static displayName = Layout.name;\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <NavMenu />\r\n        <Container>\r\n          {this.props.children}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactRoundedImage from \"react-rounded-image\";\r\n\r\n\r\nexport default class ImageRound extends Component {\r\n    render() {\r\n        return (\r\n            this.props.images.map((item, index) => {\r\n                return (\r\n                    <div>\r\n                        <ReactRoundedImage image={item?.imageUrl} className='form-container' roundedSize=\"0\" imageWidth=\"110\" imageHeight=\"110\" />\r\n                        <lable style={{ fontStyle: 'oblique'}}>{item?.catName}</lable>\r\n                        <lable style={{ paddingLeft: '9px'}}>Age: {item?.catAge}</lable>\r\n                    </div>\r\n                )\r\n            })\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ImageRound from '../components/imageRound'\r\n\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n   \r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"constructor runs\")\r\n        this.state = { forecasts: [], loading: true, payLoad: 5, searchName: '', searchAge: '', noRecords: false, countBind:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]};\r\n    }\r\n    /* Cat Name On Change Event*/\r\n    nameChange = e => {\r\n        this.setState({ searchName: e.target.value });\r\n    };\r\n    /* Cat Age On Change Event*/\r\n    ageChange = e => {\r\n        this.setState({ searchAge: e.target.value });\r\n    };\r\n    /* Page load count On Change Event*/\r\n    onFilter = e => {\r\n        this.setState({ payLoad: e.target.value });\r\n    };\r\n    /* More button click Event*/\r\n    moreControls = e => {\r\n        if (Number(this.state.payLoad) <= 15) {\r\n            this.setState({ payLoad: Number(this.state.payLoad) + 5 });\r\n            setTimeout(() => {\r\n                if (Number(this.state.payLoad) > 15) {\r\n                    this.setState({ payLoad: 15 });\r\n                }\r\n            }, 100);\r\n            \r\n            setTimeout(() => {\r\n                this.populateWeatherDataHome();\r\n            }, 100);\r\n        }\r\n        else {\r\n            this.setState({ payLoad: 15 });\r\n        }\r\n    };\r\n    \r\n    /* Reset button click event*/\r\n    resetControls = e => {\r\n        this.setState({ payLoad: 5 });\r\n        this.setState({ searchName: '' });\r\n        this.setState({ searchAge: '' });\r\n        setTimeout(() => {\r\n            this.populateWeatherDataHome();\r\n        }, 100);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.populateWeatherDataHome();\r\n        this.populateWeatherDataHome = this.populateWeatherDataHome.bind(this);\r\n    }\r\n    \r\n    static renderForecastsTableHome(forecasts) {\r\n        return (\r\n            <div>\r\n                <ImageRound images={forecasts} />\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        let contents = this.state.loading\r\n            ? <p><em>Loading...</em></p>\r\n            : Home.renderForecastsTableHome(this.state.forecasts);\r\n        return (\r\n            <div>\r\n                <p className=\"App-intro\" className=\"form-container\">\r\n                    Name:\r\n                    <input className=\"search-input\" className=\"input-text\" placeholder='Type Cat Name' name='scrName' type='text' onChange={this.nameChange} value={this.state.searchName} />\r\n                    Age:\r\n                    <input className=\"search-input\" className=\"input-text\" onKeyPress={(event) => {\r\n                        if (!/[0-9]/.test(event.key)) {\r\n                            event.preventDefault();\r\n                        }\r\n                    }} placeholder='Type Cat Age' name='scrAge' type='text' onChange={this.ageChange} value={this.state.searchAge} />\r\n                    Count:\r\n                    <select name=\"cars\" id=\"count\" className=\"input-dropdown\" onChange={this.onFilter} value={this.state.payLoad}>\r\n                        {this.state.countBind.map(team => (\r\n                            <option value={team}>\r\n                                {team}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <p></p>\r\n                    <button name='bntFilter' className=\"input-submit\" onClick={this.populateWeatherDataHome}>Filter</button>\r\n                    <button name='bntReset' className=\"input-submit\" onClick={this.resetControls}>Reset</button>\r\n                </p>\r\n                <p className=\"form-container\">\r\n                    {contents}\r\n                </p>\r\n                <div>\r\n                    {this.state.noRecords && <lable className=\"form-container\">No records found!</lable>}\r\n                    <button name='bntMore' className=\"input-submit-more\" onClick={this.moreControls}>More</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    /* Api call for fetch cat's photos GetMethod */\r\n    async populateWeatherDataHome() {\r\n        const response = await fetch(`catsphotolist?payload=${this.state.payLoad}&searchName=${this.state.searchName}&searchAge=${parseInt(this.state.searchAge == '' ? -1 : this.state.searchAge)}`);\r\n        const data = await response.json();\r\n        if (data?.length == 0) {\r\n            this.setState({ noRecords: true });\r\n        }\r\n        else {\r\n            this.setState({ noRecords: false });\r\n        }\r\n        this.setState({ forecasts: data, loading: false });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n  static displayName = App.name;\r\n  render () {\r\n    return (\r\n      <Layout>\r\n        <Route exact path='/' component={Home} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}